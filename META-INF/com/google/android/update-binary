#!/sbin/sh
# My Charging Controller
# mcc Install (201807231)
# JayminSuthar @ xda-developers

# Copyright (c) 2018 Jaymin Suthar. All rights reserved.

# This file is a part of "My Charging Controller (mcc)".

# mcc is released under the terms of the GNU GPL v3, as been
## published by the Free Software Foundation. And permission
## hereby is granted to use, modify or redistribute it maybe
## partially or entirely under GPLv3 only.

# mcc was written in a hope of being useful. And any kind of
## warranty is not provided. See GPLv3 for details.

# You should already have received a copy of GPLv3 with mcc,
## if not, see <http://www.gnu.org/licenses/>.

out_fd=/proc/self/fd/$2;
zip_path="$3";
system=/system;
tmp_dir=/dev/mcc_tmp;
cfg_path_tmp=$tmp_dir/mcc.conf;

if (! echo "$(ps -A 2>/dev/null || ps)" | grep -v grep | grep zygote >/dev/null); then
  boot_mode=false;
else
  boot_mode=true;
fi;

if (! $boot_mode); then

  mount -o bind /dev/urandom /dev/random;

  if (readlink /proc/$$/fd/$2 2>/dev/null | grep /tmp >/dev/null); then

    for fd in /proc/$$/fd/*; do

      if (readlink $fd 2>/dev/null | grep pipe >/dev/null); then

        if (ps | grep -v grep | grep " 3 ${fd##*/} " >/dev/null); then

          out_fd=/proc/self/fd/${fd##*/};
          break;
        fi;
      fi;
    done;
  fi;
fi;

ui_print() {

  if (! $boot_mode); then
    echo -e "ui_print $1\nui_print" >>$out_fd;
  else
    echo "$1";
  fi;
}

abort() {

  ui_print ' ';
  print --error "$1";
  cleanup;
  exit 1;
}

print() {
  
  if [ "$1" == --error ]; then
    ui_print "FATAL ERROR: $2";
  else
    ui_print "INFO: $1";
  fi;
}

cleanup() {

  local mounted;

  print 'Cleaning...';

  umount $mount_dir 2>/dev/null;
  losetup -d $loopdev_path 2>/dev/null;

  rm -r $tmp_dir $mcc_dir $main_path $init_path 2>/dev/null;

  if (! $boot_mode); then

    for mounted in /system /vendor /dev/random; do
      if (! umount $mounted 2>/dev/null); then umount -l $mounted; fi;
    done;
  fi;
}

is_mounted() {
  cat /proc/mounts | grep " $1 " >/dev/null;
}

mount_for_ab() {

  local device_path;

  if (is_mounted "$2"); then umount "$2"; fi;

  if (! is_mounted "$2"); then

    device_path=$(find /dev/block -iname $1$slot 2>/dev/null | head -n 1);
    device_path=$(readlink $device_path 2>/dev/null || echo $device_path);

    mount -t ext4 -o ro $device_path "$2" 2>/dev/null || \
    mount -t ext4 -o ro,remount $device_path "$2";

    return $?;
  fi;
  return 1;
}

get_prop() {
  cat "$2" | grep -m 1 "^$1=" | cut -d= -f2;
}

get_imgsize() {

  case $1 in
    --total) local field=2; ;;
    --used)  local field=1; ;;
  esac;

  local blocks=$(e2fsck -n $img_path | grep -Eo '[0-9]+/[0-9]+ blocks' | cut -d/ -f$field | cut -d' ' -f1);
  echo $(((blocks + 255) / 256));
}

set_prop() {

  local line;
  local tmp_path=$tmp_dir/tmp;

  while read -r line; do

    if (echo "$line" | grep "^$1=" >/dev/null); then
      echo "$1=$2" >>$tmp_path;
    else
      echo "$line" >>$tmp_path;
    fi;
  done <"$3";

  mv -f $tmp_path "$3";
}

set_perm() {

  if (! chown $2:$3 "$1" 2>/dev/null); then chown $2.$3 "$1"; fi;
  chmod $4 "$1";

  if [ -z "$5" ]; then
    chcon u:object_r:system_file:s0 "$1";
  else
    chcon "$5" "$1";
  fi;
}

set_perm_recursive() {

  local entry;

  find "$1" 2>/dev/null | while read -r entry; do

    if [ -d "$entry" ]; then
      set_perm "$entry" $2 $3 $4 "$6";
    else
      set_perm "$entry" $2 $3 $5 "$6";
    fi;
  done;
}

restore_cfg() {

  if (! $magisk_mode); then
    local final_path=$mcc_dir/mcc.conf;
  else
    local final_path=$cfg_path;
  fi;

  if [ -f $cfg_path_tmp ]; then

    print 'Restoring old config...';

    for prop in auto_switch auto_power thr_disable thr_enable thr_power; do
      set_prop $prop $(get_prop $prop $cfg_path_tmp) $final_path;
    done;
  fi;
}

warn_for_system_install() {

  magisk_mode=false;

  ui_print ' ';
  ui_print '*************************************************************';
  ui_print '             Failed to detect support for Magisk             ';
  ui_print '*************************************************************';
  ui_print '         Forcing a system installation as a fallback         ';
  ui_print '*************************************************************';
  ui_print ' ';
}

ui_print ' ';
ui_print '*************************************************************';
ui_print '                   My Charging Controller                    ';
ui_print '*************************************************************';
ui_print '      mcc is developed and copyrighted by Jaymin Suthar      ';
ui_print '*************************************************************';
ui_print ' ';

print 'Preparing environment, mounts...';

umask 022;

if (! which unzip >/dev/null); then abort 'Failed to find unzip'; fi;

if (! is_mounted /data); then

  if (! mount /data 2>/dev/null); then
    if (! mount -o rw,remount /data); then abort 'Failed to mount /data'; fi;
  fi;
fi;

if (! slot=$(get_prop androidboot.slot_suffix /proc/cmdline 2>/dev/null)); then
  if (slot=$(get_prop androidboot.slot /proc/cmdline)); then slot=_$slot; fi;
fi;

print 'Mounting /system, /vendor (ro)...';

if [ -n "$slot" ]; then

  print "A/B slot scheme detected, using: $slot";

  if (! mount_for_ab system /system); then
    mount_for_ab system_root /system;
  fi;

  if [ -f /system/init.rc ]; then

    print 'system_root image scheme detected';
    system=/system/system;
  fi;

  if [ -L $system/vendor ]; then mount_for_ab vendor /vendor; fi;

else
  for mount_it in /system /vendor; do

    if (! mount -o ro $mount_it 2>/dev/null); then
      mount -o ro,remount $mount_it;
    fi;
  done;
fi;

if (! is_mounted /system); then
  abort 'Failed to mount /system';

elif [ -L $system/vendor ]; then
  if (! is_mounted /vendor); then abort 'Failed to mount /vendor'; fi;
fi;

abi_long=$(get_prop ro.product.cpu.abi $system/build.prop);

if (echo $abi_long | grep arm >/dev/null); then
  arch=arm;
else
  arch=x86;
fi;

if (! $boot_mode); then

  if (echo $abi_long | grep -E 'arm64|x86_64' >/dev/null); then
    export LD_LIBRARY_PATH=$system/lib64:$system/vendor/lib64;
  else
    export LD_LIBRARY_PATH=$system/lib:$system/vendor/lib;
  fi;
fi;

print 'Detecting Magisk support...';

if [ -d /data/adb/magisk ]; then

  magisk_mode=true;
  func_path=/data/adb/magisk/util_functions.sh;
  img_path=/data/adb/magisk.img;
  mcc_dir_boot=/sbin/.core/img/mcc;

elif [ -d /data/magisk ]; then

  magisk_mode=true;
  func_path=/data/magisk/util_functions.sh;
  img_path=/data/magisk.img;
  mcc_dir_boot=/magisk/mcc;

else
  warn_for_system_install;
fi;

if ($magisk_mode && [ ! -f $func_path ]); then warn_for_system_install; fi;

if ($magisk_mode); then

  mount_dir=$tmp_dir/img;
  mcc_dir=$mount_dir/mcc;
  bin_dir=$mcc_dir/bin;
  doc_dir=$mcc_dir/docs;
  sys_dir=$mcc_dir/system;
  bb_path=$bin_dir/busybox;
  cfg_path=$mcc_dir/mcc.conf;

  if ($boot_mode); then img_path=${img_path%/*}/magisk_merge.img; fi;

  if [ $(get_prop MAGISK_VER_CODE $func_path) -lt 1400 ]; then
    abort 'Upgrade to Magisk >= 1400 to use mcc';
  fi;

  print 'Installing mcc...';

  mkdir -p $mount_dir;

  if [ -f $img_path ]; then

    e2fsck -p -f $img_path >/dev/null;

    img_total=$(get_imgsize --total);
    img_used=$(get_imgsize --used);

    if [ $img_total -eq $img_used ]; then

      print "Expanding $img_path...";
      resize2fs $img_path $((img_total + 32))M >/dev/null;
    fi;

  else
    print "Creating $img_path...";

    if (! make_ext4fs -l 64M $img_path >/dev/null); then
      $system/bin/mke2fs -t ext4 $img_path 64M >/dev/null;
    fi;
  fi;

  print "Mounting $img_path...";

  for minor in 0 1 2 3 4 5 6 7; do

    loopdev_path=/dev/block/loop$minor;

    if [ ! -f $loopdev_path ]; then
      if [ ! -b $loopdev_path ]; then mknod $loopdev_path b 7 $minor; fi;
    fi;

    if (losetup $loopdev_path $img_path >/dev/null 2>&1); then

      if (mount -t ext4 -o rw,noatime $loopdev_path $mount_dir 2>/dev/null); then
        break;
      elif (mount -t ext4 -o rw,loop $loopdev_path $mount_dir); then
        break;
      fi;
    fi;
  done;
  if (! is_mounted $mount_dir); then abort "Failed to mount $img_path"; fi;

  if ($boot_mode); then
    cp $mcc_dir_boot/mcc.conf $tmp_dir/ 2>/dev/null;
  else
    cp $cfg_path $tmp_dir/ 2>/dev/null;
  fi;

  rm -r $mcc_dir 2>/dev/null;
  mkdir -p $doc_dir $mcc_dir/log;

  print 'Unzipping mcc files...';

  unzip -o "$zip_path" 'system/*' bin/busybox_$arch mcc.conf post-fs-data.sh service.sh module.prop -d $mcc_dir >/dev/null;
  unzip -o "$zip_path" COPYING README.md -d $doc_dir >/dev/null;

  restore_cfg;

  print 'Setting up...';

  rm -r $sys_dir/etc;

  mv ${bb_path}_* $bb_path;

  if [ ! -d $system/xbin ]; then mv $sys_dir/xbin $sys_dir/bin; fi;

  touch $mcc_dir/auto_mount;

  if ($boot_mode); then

    mkdir $mcc_dir_boot 2>/dev/null;
    touch $mcc_dir_boot/update;
    cp -f $mcc_dir/module.prop $mcc_dir_boot/;
  fi;

  print 'Setting permissions...';

  set_perm_recursive $mcc_dir      0    0 0755 0644;
  set_perm_recursive $sys_dir/*bin 0 2000 0755 0755;
  set_perm           $bb_path      0 2000 0755;

else
  mcc_dir=/data/adb/mcc;
  bin_dir=$mcc_dir/bin;
  doc_dir=$mcc_dir/docs;
  bb_path=$bin_dir/busybox;
  main_path=$system/bin/mcc;
  init_path=$system/etc/init.d/mcc_launcher;

  if [ -n "${system%/*}" ]; then
    root=${system%/*};
  else
    root=/;
  fi;

  if [ ! -d ${init_path%/*} ]; then

    ui_print ' ';
    print --error 'Failed to detect init.d support';
    abort "Please check 'Init.d Injector' for this";
  fi;

  print 'Installing mcc...';

  mv $mcc_dir/mcc.conf $tmp_dir/ 2>/dev/null;

  rm -r $mcc_dir 2>/dev/null;
  mkdir -p $doc_dir $mcc_dir/log;

  print 'Unzipping mcc files...';

  unzip -o "$zip_path" 'system/*' -d $root >/dev/null;
  unzip -o "$zip_path" bin/busybox_$arch mcc.conf -d $mcc_dir >/dev/null;
  unzip -o "$zip_path" COPYING README.md -d $doc_dir >/dev/null;

  restore_cfg;

  print 'Setting up...';

  mv ${bb_path}_* $bb_path;

  mv -f $system/xbin/mcc $main_path;
  if [ -z "$(ls $system/xbin)" ]; then rm -r $system/xbin; fi;

  print 'Setting permissions...';

  set_perm_recursive $mcc_dir   0    0 0700 0600 u:object_r:adb_data_file:s0;
  set_perm           $bb_path   0 2000 0710      u:object_r:adb_data_file:s0;
  set_perm           $main_path 0 2000 0755;
  set_perm           $init_path 0    0 0755;
fi;

cleanup;

ui_print '- Done';
exit 0;
